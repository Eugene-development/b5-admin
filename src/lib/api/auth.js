/**
 * Authentication API functions for B5-Admin
 * Specialized functions for user authentication, registration, and email verification
 */

import { post, get } from './client.js';
import { API_CONFIG } from './config.js';

/**
 * Login user with email and password
 * @param {string} email - User email
 * @param {string} password - User password
 * @param {boolean} remember - Whether to remember the user (long-term token)
 * @returns {Promise<Object>} Login response with user data and token
 */
export async function loginUser(email, password, remember = false) {
	try {
		const response = await post(API_CONFIG.endpoints.login, {
			email,
			password,
			remember
		});

		console.log('üîê Login API response:', response);
		return {
			success: true,
			user: response.user || response.data?.user || null,
			token: response.token || response.data?.token || null,
			message: response.message || response.data?.message || 'Login successful'
		};
	} catch (error) {
		// Handle specific authentication errors
		let message = 'Login failed';

		if (error.status === 401) {
			message = '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å';
		} else if (error.status === 422) {
			message = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö';
		} else if (error.status === 429) {
			message = '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
		} else if (error.status === 0) {
			message = error.message; // Network error message
		}

		return {
			success: false,
			message: error.message || message,
			errors: error.data?.errors || {}
		};
	}
}

/**
 * Register new user
 * @param {Object} userData - User registration data
 * @param {string} userData.name - User name
 * @param {string} userData.email - User email
 * @param {string} userData.password - User password
 * @param {string} userData.password_confirmation - Password confirmation
 * @param {string} userData.region - User region (optional)
 * @param {string} userData.phone - User phone (optional)
 * @param {boolean} userData.terms_accepted - Terms acceptance
 * @returns {Promise<Object>} Registration response
 */
export async function registerUser(userData) {
	try {
		const response = await post(API_CONFIG.endpoints.register, userData);

		return {
			success: true,
			user: response.user || response.data?.user || null,
			token: response.token || response.data?.token || null,
			message: response.message || response.data?.message || 'Registration successful'
		};
	} catch (error) {
		// Handle specific registration errors
		let message = 'Registration failed';

		if (error.status === 422) {
			message = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã';
		} else if (error.status === 409) {
			message = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç';
		} else if (error.status === 429) {
			message = '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
		} else if (error.status === 0) {
			message = error.message; // Network error message
		}

		return {
			success: false,
			message: error.message || message,
			errors: error.data?.errors || {}
		};
	}
}

/**
 * Logout current user
 * @returns {Promise<Object>} Logout response
 */
export async function logoutUser() {
	try {
		const response = await post(API_CONFIG.endpoints.logout, {}, {}, true);

		return {
			success: true,
			message: response.message || 'Logout successful'
		};
	} catch (error) {
		// Even if logout fails on server, we consider it successful locally
		return {
			success: true,
			message: 'Logout completed'
		};
	}
}

/**
 * Get current authenticated user data
 * @returns {Promise<Object>} User data response
 */
export async function getCurrentUser() {
	try {
		const response = await get(API_CONFIG.endpoints.user, {}, true);

		return {
			success: true,
			user: response.user || response.data?.user || response,
			status: 200,
			message: 'User data retrieved successfully'
		};
	} catch (error) {
		// Handle specific user data errors
		let message = 'Failed to get user data';

		if (error.status === 401) {
			message = '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ';
		} else if (error.status === 403) {
			message = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
		} else if (error.status === 0) {
			message = error.message; // Network error message
		}

		return {
			success: false,
			status: error.status ?? null,
			message: error.message || message,
			errors: error.data?.errors || {}
		};
	}
}

/**
 * Send email verification notification
 * @returns {Promise<Object>} Email verification response
 */
export async function sendEmailVerification() {
	try {
		const response = await post(API_CONFIG.endpoints.sendEmailVerification, {}, {}, true);

		return {
			success: true,
			message: response.message || 'Verification email sent successfully'
		};
	} catch (error) {
		// Handle specific email verification errors
		let message = 'Failed to send verification email';

		if (error.status === 401) {
			message = '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è';
		} else if (error.status === 429) {
			message = '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –ø–∏—Å—å–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
		} else if (error.status === 422) {
			message = 'Email –∞–¥—Ä–µ—Å —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω';
		} else if (error.status === 0) {
			message = error.message; // Network error message
		}

		return {
			success: false,
			message: error.message || message,
			errors: error.data?.errors || {}
		};
	}
}

/**
 * Resend email verification notification (alias for sendEmailVerification)
 * @returns {Promise<Object>} Email verification response
 */
export async function resendEmailVerification() {
	return sendEmailVerification();
}

/**
 * Verify email address using verification link parameters
 * @param {string} id - User ID from verification link
 * @param {string} hash - Hash from verification link
 * @returns {Promise<Object>} Email verification response
 */
export async function verifyEmail(id, hash) {
	try {
		const endpoint = `${API_CONFIG.endpoints.verifyEmail}/${id}/${hash}`;
		const response = await get(endpoint, {}, false);

		return {
			success: true,
			message: response.message || 'Email verified successfully'
		};
	} catch (error) {
		// Handle specific email verification errors
		let message = 'Email verification failed';

		if (error.status === 401) {
			message = '–°—Å—ã–ª–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞';
		} else if (error.status === 403) {
			message = '–°—Å—ã–ª–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞';
		} else if (error.status === 404) {
			message = '–°—Å—ã–ª–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞';
		} else if (error.status === 422) {
			message = '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è';
		} else if (error.status === 0) {
			message = error.message; // Network error message
		}

		return {
			success: false,
			message: error.message || message,
			errors: error.data?.errors || {}
		};
	}
}
